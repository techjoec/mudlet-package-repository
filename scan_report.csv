package,file,line_number,category,matched,context
MedUI.mpackage,demontools.lua,98,Unsafe Inputs,loadstring(,"
local function getValueAt(accessString)
  local ok, err = pcall(loadstring(""return "" .. tostring(accessString)))
  if ok then return err end
  return nil, err"
MedUI.mpackage,emco.lua,2229,Unsafe Inputs,load(,"  
  
  function EMCO:load()
    local dirname = getMudletHomeDir() .. ""/EMCO/""
    local filename = dirname .. self.name .. "".lua"""
MedUI.mpackage,emco.lua,2234,Unsafe Inputs,load(,"    local configTable = {}
    if io.exists(filename) then
      table.load(filename, configTable)
    else
      debugc(string.format(""Attempted to load config for EMCO named %s but the file could not be found. Filename: %s"", self.name, filename))"
AchaeaChatTabs.mpackage,emco.lua,2229,Unsafe Inputs,load(,"

function EMCO:load()
  local dirname = getMudletHomeDir() .. ""/EMCO/""
  local filename = dirname .. self.name .. "".lua"""
AchaeaChatTabs.mpackage,emco.lua,2234,Unsafe Inputs,load(,"  local configTable = {}
  if io.exists(filename) then
    table.load(filename, configTable)
  else
    debugc(string.format(""Attempted to load config for EMCO named %s but the file could not be found. Filename: %s"", self.name, filename))"
MDK.mpackage,demontools.lua,98,Unsafe Inputs,loadstring(,"
local function getValueAt(accessString)
  local ok, err = pcall(loadstring(""return "" .. tostring(accessString)))
  if ok then return err end
  return nil, err"
MDK.mpackage,echofile.lua,15,Unsafe Inputs,loadstring(,"if _VERSION == ""Lua 5.1"" then
  load = function(code, name, _, env)
    local fn, err = loadstring(code, name)
    if fn then
      setfenv(fn, env)"
MDK.mpackage,echofile.lua,46,Unsafe Inputs,load(,"      end,
    })
    local fn, err = load(""return "" .. code, ""expression `"" .. code .. ""`"", ""t"", exp_env)
    if fn then
      return tostring(fn())"
MDK.mpackage,emco.lua,2229,Unsafe Inputs,load(,"

function EMCO:load()
  local dirname = getMudletHomeDir() .. ""/EMCO/""
  local filename = dirname .. self.name .. "".lua"""
MDK.mpackage,emco.lua,2234,Unsafe Inputs,load(,"  local configTable = {}
  if io.exists(filename) then
    table.load(filename, configTable)
  else
    debugc(string.format(""Attempted to load config for EMCO named %s but the file could not be found. Filename: %s"", self.name, filename))"
MDK.mpackage,loginator.lua,410,External Communications,openUrl(,"
function Loginator:open()
  openUrl(self:getFullFilename())
end
"
MDK.mpackage,loginator.lua,415,External Communications,openUrl(,"
function Loginator:openDir()
  openUrl(self:getPath())
end
"
MDK.mpackage,spinbox.lua,309,External Communications,downloadFile(,"    end
    if upURL:match(""^http"") then
      self:downloadFile(upURL, upFile)
    elseif io.exists(upURL) then
      upFile = upURL"
MDK.mpackage,spinbox.lua,323,External Communications,downloadFile(,"    end
    if downURL:match(""^http"") then
      self:downloadFile(downURL, downFile)
    elseif io.exists(downURL) then
      downFile = downURL"
MDK.mpackage,spinbox.lua,346,External Communications,downloadFile(,"

function spinbox:downloadFile(url, fileName)
  local parts = fileName:split(""/"")
  parts[#parts] = nil"
MDK.mpackage,spinbox.lua,371,External Communications,downloadFile(,"  registerNamedEventHandler(uname, handlerName .. ""done"", ""sysDownloadDone"", handler, true)
  registerNamedEventHandler(uname, handlerName .. ""error"", ""sysDownloadError"", handler, true)
  downloadFile(fileName, url)
end
"
MDK.mpackage,spinbox.lua,379,Unsafe Inputs,load(,"  local locations = {}
  if io.exists(saveFile) then
    table.load(saveFile, locations)
  end
  return locations"
MDK.mpackage,sug.lua,20,Unsafe Inputs,loadstring(,"
local function getValueAt(accessString)
  local ok, err = pcall(loadstring(""return "" .. tostring(accessString)))
  if ok then return err end
  return nil, err"
MDK.mpackage,timergauge.lua,236,Unsafe Inputs,loadstring(,"  local hooktype = type(hook)
  if hooktype == ""string"" then
    local f, e = loadstring(""return "" .. hook)
    if not f then
      f, e = loadstring(hook)"
MDK.mpackage,timergauge.lua,238,Unsafe Inputs,loadstring(,"    local f, e = loadstring(""return "" .. hook)
    if not f then
      f, e = loadstring(hook)
    end
    if not f then"
i18n-support-for-mudlet-scripts.mpackage,config.lua,6,Unsafe Inputs,load(,"author = [[demonnic]]
mpackage = [[i18n-support-for-mudlet-scripts]]
description = [[i18n.lua is a Lua internationalization library that allows developers to easily manage and switch between multiple language translations for their applications. The package enables users to load translation tables for different locales and dynamically change the active language using simple functions like i18n.load() and i18n.setLocale(). With this library, developers can quickly implement multilingual support by defining translation strings and retrieving localized text with the i18n() function.

"
i18n-support-for-mudlet-scripts.mpackage,i18n/init.lua,174,Unsafe Inputs,load(,"end

function i18n.load(data)
  recursiveLoad(nil, data)
end"
i18n-support-for-mudlet-scripts.mpackage,i18n/init.lua,179,Unsafe Inputs,loadfile(,"
function i18n.loadFile(path)
  local chunk = assert(loadfile(path))
  local data = chunk()
  i18n.load(data)"
i18n-support-for-mudlet-scripts.mpackage,i18n/init.lua,181,Unsafe Inputs,load(,"  local chunk = assert(loadfile(path))
  local data = chunk()
  i18n.load(data)
end
"
EMCOChat.mpackage,emco.lua,2229,Unsafe Inputs,load(,"

function EMCO:load()
  local dirname = getMudletHomeDir() .. ""/EMCO/""
  local filename = dirname .. self.name .. "".lua"""
EMCOChat.mpackage,emco.lua,2234,Unsafe Inputs,load(,"  local configTable = {}
  if io.exists(filename) then
    table.load(filename, configTable)
  else
    debugc(string.format(""Attempted to load config for EMCO named %s but the file could not be found. Filename: %s"", self.name, filename))"
Achaean System.mpackage,curing/remedies.lua,585,Unsafe Inputs,dofile(,"
    
    dofile(getMudletHomeDir() .. ""/Achaean System/curing/remedies.lua"")

    "
Achaean System.mpackage,defenses/defenses.lua,347,Unsafe Inputs,dofile(,"
    
    dofile(getMudletHomeDir() .. ""/Achaean System/defenses/defenses.lua"")  

    "
Achaean System.mpackage,hunting/hunting.lua,2185,Unsafe Inputs,dofile(,"	
function reloadHuntingFile()	
  dofile(getMudletHomeDir() .. ""/Achaean System/hunting/hunting.lua"")  
  echo(""\nHunting Loaded"")
end"
Achaean System.mpackage,system/libs/deps/preferences.lua,133,Unsafe Inputs,load(,"  
  
  function preferences.load(pkg, file, defaults) end

  "
Achaean System.mpackage,system/libs/luarocks/cmd.lua,254,Unsafe Inputs,loadfile(,"         for _, d in ipairs(dirs) do
            local f = dir.path(d, ""default-lua-version.lua"")
            local mod, err = loadfile(f, ""t"")
            if mod then
               local pok, ver = pcall(mod)"
Achaean System.mpackage,system/libs/luarocks/cmd/write_rockspec.lua,124,Process Spawning,io.popen(,"   local function detect_url_from_command(program, args, directory)
      local command = fs.Q(cfg.variables[program:upper()]).. "" ""..args
      local pipe = io.popen(fs.command_at(directory, fs.quiet_stderr(command)))
      if not pipe then return nil end
      local url = pipe:read(""*a""):match(""^([^\r\n]+)"")"
Achaean System.mpackage,system/libs/luarocks/core/cfg.lua,444,Process Spawning,io.popen(,"         
         
         local pipe = io.popen(""cygpath 
         local mingw_prefix = pipe:read(""*l"")
         pipe:close()"
Achaean System.mpackage,system/libs/luarocks/core/persist.lua,26,Unsafe Inputs,loadstring(,"   local chunk, ran
   if _VERSION == ""Lua 5.1"" then 
      chunk, err = loadstring(str, filename)
      if chunk then
         setfenv(chunk, env)"
Achaean System.mpackage,system/libs/luarocks/core/persist.lua,32,Unsafe Inputs,load(,"      end
   else 
      chunk, err = load(str, filename, ""t"", env)
      if chunk then
         ran, err = pcall(chunk)"
Achaean System.mpackage,system/libs/luarocks/core/util.lua,20,Process Spawning,os.execute(,"                   and (os.getenv(""TMP"") .. ""/luarocks-"" .. tostring(math.floor(math.random() * 10000)))
                   or os.tmpname()
   os.execute(cmd .. "" > "" .. tmpfile)
   local fd = io.open(tmpfile, ""rb"")
   if not fd then"
Achaean System.mpackage,system/libs/luarocks/deplocks.lua,32,Unsafe Inputs,load(,"end

function deplocks.load(root_rock_name, dirname)
   if deptable_mode ~= ""start"" then
      return true, nil"
Achaean System.mpackage,system/libs/luarocks/deps.lua,297,Unsafe Inputs,load(,"   local rocks_provided = rockspec.rocks_provided

   local ok, filename, err = deplocks.load(name, deplock_dir or ""."")
   if filename then
      util.printout(""Using dependencies pinned in lockfile: "" .. filename)"
Achaean System.mpackage,system/libs/luarocks/fetch/git.lua,19,Process Spawning,io.popen(,"local function git_version(git_cmd)
   if not cached_git_version then
      local version_line = io.popen(fs.Q(git_cmd)..' 
      local version_string = version_line:match('%d-%.%d+%.?%d*')
      cached_git_version = vers.parse_version(version_string)"
Achaean System.mpackage,system/libs/luarocks/fetch/git.lua,64,Process Spawning,io.popen(,"      return nil
   end
   local pd = io.popen(fs.command_at(fs.current_dir(), fs.Q(git_cmd).."" log 
   if not pd then
      return nil"
Achaean System.mpackage,system/libs/luarocks/fetch/sscm.lua,27,Process Spawning,io.popen(,"   
   local working_dir
   local tmp = io.popen(string.format(sscm_cmd..[[ property ""/"" -d -b%s -p%s]], branch, repository))
   for line in tmp:lines() do
      "
Achaean System.mpackage,system/libs/luarocks/fs/lua.lua,328,Process Spawning,os.execute(,"
function fs_lua.execute_string(cmd)
   local code = os.execute(cmd)
   return (code == 0 or code == true)
end"
Achaean System.mpackage,system/libs/luarocks/fs/lua.lua,1261,Unsafe Inputs,loadfile(,"  local lua = fs.Q(cfg.variables.LUA)  
  
  local result = fs.execute_string(lua..[[ -e ""if loadfile(']]..filename..[[') then os.exit(0) else os.exit(1) end""]])
  return (result == true)
end"
Achaean System.mpackage,system/libs/luarocks/fs/tools.lua,58,Process Spawning,io.popen(,"      local current = cache_pwd
      if not current then
         local pipe = io.popen(fs.quiet_stderr(vars.PWD))
         current = pipe:read(""*a""):gsub(""^%s*"", """"):gsub(""%s*$"", """")
         pipe:close()"
Achaean System.mpackage,system/libs/luarocks/fs/tools.lua,121,Process Spawning,os.execute(,"      cmd = fs.command_at(current, cmd)
   end
   local code = os.execute(cmd)
   if code == 0 or code == true then
      return true"
Achaean System.mpackage,system/libs/luarocks/fs/tools.lua,134,Process Spawning,io.popen(,"
function tools.dir_iterator(at)
   local pipe = io.popen(fs.command_at(at, vars.LS, true))
   for file in pipe:lines() do
      if file ~= ""."" and file ~= "".."" then"
Achaean System.mpackage,system/libs/luarocks/fs/tools.lua,209,Process Spawning,io.popen(,"   end

   local pipe = io.popen(md5checker.."" ""..fs.Q(fs.absolute_name(file)))
   local computed = pipe:read(""*l"")
   pipe:close()"
Achaean System.mpackage,system/libs/luarocks/fs/unix/tools.lua,117,Process Spawning,io.popen(,"   end
   local result = {}
   local pipe = io.popen(fs.command_at(at, fs.quiet_stderr(vars.FIND.."" *"")))
   for file in pipe:lines() do
      table.insert(result, file)"
Achaean System.mpackage,system/libs/luarocks/fs/unix/tools.lua,200,Process Spawning,io.popen(,"         return umask_cache
      end
      local fd = assert(io.popen(""umask -S""))
      local umask = assert(fd:read(""*a""))
      fd:close()"
Achaean System.mpackage,system/libs/luarocks/fs/unix/tools.lua,263,Process Spawning,io.popen(,"
   local template = (os.getenv(""TMPDIR"") or ""/tmp"") .. ""/luarocks_"" .. name_pattern:gsub(""/"", ""_"") .. ""-XXXXXX""
   local pipe = io.popen(vars.MKTEMP.."" -d ""..fs.Q(template))
   local dirname = pipe:read(""*l"")
   pipe:close()"
Achaean System.mpackage,system/libs/luarocks/fs/unix/tools.lua,301,Process Spawning,io.popen(,"      return user
   end
   local pd = io.popen(""whoami"", ""r"")
   if not pd then
      return """""
Achaean System.mpackage,system/libs/luarocks/fs/win32/tools.lua,131,Process Spawning,io.popen(,"   end
   local result = {}
   local pipe = io.popen(fs.command_at(at, fs.quiet_stderr(vars.FIND), true))
   for file in pipe:lines() do
      "
Achaean System.mpackage,system/libs/luarocks/fs/win32/tools.lua,224,Process Spawning,io.popen(,"   }
   local result = {}
   local fd = assert(io.popen(""wmic UserAccount get name""))
   for user in fd:lines() do
      user = user:gsub(""%s+$"", """")"
Achaean System.mpackage,system/system.lua,200,Unsafe Inputs,dofile(,"function reloadSystem()
  
  dofile(getMudletHomeDir() .. ""/Achaean System/system/system.lua"")
  cecho(""\n<green>Configuration File Loaded.\n"")
end"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_allocs.lua,619,Unsafe Inputs,load(,"
	Status.allocCurrentDisplay = 1
	Allocs.load()
	Allocs.showAllocsCurrentFields(Status.allocCurrentDisplay)
	Allocs.showAllocsCurrentNumber(Status.allocCurrentDisplay)"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_allocs.lua,695,Unsafe Inputs,load(,"
		dba.execute(query)
		Allocs.load()
		Allocs.showAllocsCurrentFields(Status.allocCurrentDisplay)
		cecho(""<yellow>Allocs: Allocation copied\n"")"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_allocs.lua,725,Unsafe Inputs,load(,"
		dba.execute(query)
		Allocs.load()
		Allocs.showAllocsCurrentFields(Status.allocCurrentDisplay)
		Events.raiseEvent(""checkAllocSetButtonEvent"", {target = ""unknown""})"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_repeat.lua,264,Unsafe Inputs,load(,"	Status.repeatCurrentDisplay = 1
    Status.repeatCurrentActive = 0
	Repeat.load()
	showRepeatCurrentFields(Status.repeatCurrentDisplay)
	showRepeatCurrentNumber(Status.repeatCurrentDisplay)"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_repeat.lua,467,Unsafe Inputs,load(,"
		dba.execute(query)
        Repeat.load()
        if Status.repeatCurrentActive == target then
            Status.repeatCurrentActive = 0"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_repeat.lua,499,Unsafe Inputs,load(,"
		dba.execute(query)
        Repeat.load()
        if Status.repeatCurrentActive == target then
            Status.repeatCurrentActive = 0"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_saver.lua,22,Unsafe Inputs,load(,"local function setup(args)
  if io.exists(getMudletHomeDir()..""/dartmudlet.txt"") then
    table.load(getMudletHomeDir()..""/dartmudlet.txt"", saveTable)
  else
    saveTable = {}"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_tabs.lua,1144,Unsafe Inputs,load(,"

function Adjustable.TabWindow:load(slot, dir)
    if type(self) ~= ""table"" then
        dir = slot"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_tabs.lua,1156,Unsafe Inputs,load(,"    local mytable = {}
    if io.exists(loadDir) then
        table.load(loadDir, mytable)
    else
        return ""No saved settings found at: ""..loadDir"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_tabs.lua,1191,Unsafe Inputs,load(,"                tempStyleWindow:createTempWindow(nil, k)
            end
            Adjustable.TabWindow.all[k].container.container:load(slot, dir)
            if v.windowname ~= ""main"" then
                Adjustable.TabWindow.all[k].container.container:changeContainer(Geyser.windowList[v.windowname..""Container""].windowList[v.windowname])"
dartmudlet-1.8.5.zip,SCRIPTS/scripts_tabs.lua,1238,Unsafe Inputs,load(,"                    end
                    
                    myTab:load(slot, dir)
                end
            end"
dartmudlet-1.8.5.zip,_core.lua,19,Unsafe Inputs,dofile(,"	for file in lfs.dir(aliases_directory) do
		if lfs.attributes(aliases_directory..file,""mode"") == ""file"" then
			table.insert(modules, dofile(aliases_directory..file))
		end
	end"
dartmudlet-1.8.5.zip,_core.lua,26,Unsafe Inputs,dofile(,"	for file in lfs.dir(scripts_directory) do
		if lfs.attributes(scripts_directory..file,""mode"") == ""file"" then
			table.insert(modules, dofile(scripts_directory..file))
		end
	end"
dartmudlet-1.8.5.zip,_core.lua,33,Unsafe Inputs,dofile(,"	for file in lfs.dir(timers_directory) do
		if lfs.attributes(timers_directory..file,""mode"") == ""file"" then
			table.insert(modules, dofile(timers_directory..file))
		end
	end"
dartmudlet-1.8.5.zip,_core.lua,40,Unsafe Inputs,dofile(,"	for file in lfs.dir(triggers_directory) do
		if lfs.attributes(triggers_directory..file,""mode"") == ""file"" then
			table.insert(modules, dofile(triggers_directory..file))
		end
	end"
dartmudlet-1.8.5.zip,_core.lua,47,Unsafe Inputs,dofile(,"	for file in lfs.dir(ui_directory) do
		if lfs.attributes(ui_directory..file,""mode"") == ""file"" then
			table.insert(modules, dofile(ui_directory..file))
		end
	end"
dartmudlet-1.8.5.zip,_core.lua,60,Unsafe Inputs,load(,"	isFirstLoad = false

	_Core.load()

	send(""score"", false)"
dartmudlet-1.8.5.zip,_core.lua,76,Unsafe Inputs,load(,"	for i,module in ipairs(modules) do
		if module.load then
			module.load()
		end
	end"
PRS.mpackage,AdjustableTabWindow.lua,1114,Unsafe Inputs,load(,"

function Adjustable.TabWindow:load(slot, dir)
    if type(self) ~= ""table"" then
        dir = slot"
PRS.mpackage,AdjustableTabWindow.lua,1128,Unsafe Inputs,load(,"    local mytable = {}
    if io.exists(loadDir) then
        table.load(loadDir, mytable)
    else
        return ""No saved settings found at: "" .. loadDir"
PRS.mpackage,AdjustableTabWindow.lua,1163,Unsafe Inputs,load(,"                tempStyleWindow:createTempWindow(nil, k)
            end
            Adjustable.TabWindow.all[k].container.container:load(slot, dir)
            if v.windowname ~= ""main"" then
                Adjustable.TabWindow.all[k].container.container:changeContainer("
PRS.mpackage,AdjustableTabWindow.lua,1212,Unsafe Inputs,load(,"                    end
                    
                    myTab:load(slot, dir)
                end
            end"
PRS.mpackage,AdjustableTabWindow.lua,1353,Unsafe Inputs,load(,"    end
    emco.load = function(s, slot, dir)
        EMCO.load(s)
        self:load(slot, dir)
    end"
PRS.mpackage,AdjustableTabWindow.lua,1354,Unsafe Inputs,load(,"    emco.load = function(s, slot, dir)
        EMCO.load(s)
        self:load(slot, dir)
    end
end"
PRS.mpackage,demontools.lua,98,Unsafe Inputs,loadstring(,"
local function getValueAt(accessString)
  local ok, err = pcall(loadstring(""return "" .. tostring(accessString)))
  if ok then return err end
  return nil, err"
PRS.mpackage,emco.lua,2229,Unsafe Inputs,load(,"

function EMCO:load()
  local dirname = getMudletHomeDir() .. ""/EMCO/""
  local filename = dirname .. self.name .. "".lua"""
PRS.mpackage,emco.lua,2234,Unsafe Inputs,load(,"  local configTable = {}
  if io.exists(filename) then
    table.load(filename, configTable)
  else
    debugc(string.format(""Attempted to load config for EMCO named %s but the file could not be found. Filename: %s"", self.name, filename))"
PRS.mpackage,sug.lua,20,Unsafe Inputs,loadstring(,"
local function getValueAt(accessString)
  local ok, err = pcall(loadstring(""return "" .. tostring(accessString)))
  if ok then return err end
  return nil, err"
demonhighlighter.mpackage,config.lua,157,Unsafe Inputs,load(,"  * use with caution
  * really really
* `Highlighter:load(silent)`
  * loads the configuration and items for the Highlighter from disk
  * if silent is true, then it will not echo to the main console"
LusterniaChatTabs.mpackage,emco.lua,2137,Unsafe Inputs,load(,"

function EMCO:load()
  local dirname = getMudletHomeDir() .. ""/EMCO/""
  local filename = dirname .. self.name .. "".lua"""
LusterniaChatTabs.mpackage,emco.lua,2142,Unsafe Inputs,load(,"  local configTable = {}
  if io.exists(filename) then
    table.load(filename, configTable)
  else
    debugc(string.format(""Attempted to load config for EMCO named %s but the file could not be found. Filename: %s"", self.name, filename))"
